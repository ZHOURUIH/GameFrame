float4 _Time : Time (t / 20, t, t * 2, t * 3)
从游戏启动到当前经过的时间,t的单位是秒

float4 ComputeScreenPos(float4 pos);
通过顶点经过MVP矩阵计算后的坐标转换为齐次屏幕坐标,如果用作tex2D的参数则需要将齐次坐标转换为屏幕坐标,就是xy分量都除以w.如果用作tex2Dproj的参数,则不需要任何转换.
用tex2Dproj、UNITY_PROJ_COORD等宏可以帮我们处理了跨平台等问题。

GrabPass
GrabPass在Shader中可以是任意顺序，具体看你想要的效果而定。在GrabPass设置Name命令，可以有效减少GrabTexture的次数。相同Name属性的shader，使用同一张GrabTexture。
uniform sampler2D _GrabTexture;

vert函数中的vertex和frag中的vertex不一样,在传到frag之前会经过处理,所以如果想要在frag中获取vertex,则需要在vert中备份

inline float2 ComputeGrabScreenPos1 (float4 pos)
{
	float4 screenPos = float4( pos.xy / pos.w, 0, 0 );
	float2 sceneUVs = float2(1,_ProjectionParams.x)*screenPos.xy*0.5 + float2(0.5, 0.5);
	return sceneUVs;
}
与内置的ComputeScreenPos功能相似,pos为顶点经过MVP矩阵计算后的坐标,但是返回值可以直接作为tex2D的参数,是视口坐标系中的点.因为投影后的画面大小是2*2的,以中心为原点,其中_ProjectionParams.x是为了兼容OpenGL与D3D,因为这两个的坐标系不一致.因为视口空间的宽高是1,并且原点在左下角或者左上角,所以需要加上float2(0.5, 0.5)

float3 UnpackNormal(float4 normalColor)
将法线贴图中采样获得的像素值转换为法线向量

_MainTex_TexelSize
x contains 1.0/width
y contains 1.0/height
z contains width
w contains height
可获得MainTexture的像素宽高

_GrabTexture_TexelSize
x contains 1.0/width
y contains 1.0/height
z contains width
w contains height
可获得GrabTexture的像素宽高

multi_compile
多行multi_compile会生成若干个变体,数量为各个每一行的multi_compile定义的关键字的乘积.
其中__表示定义了一个没有名字的关键字,会参与变体数量的计算,相当于一个普通的关键字,但是因为没有名字,所以不能在shader代码中使用.也不能使用EnableKeyword访问
一般情况下一行的multi_compile中的关键字最多会启用一个,也可能全部都禁用,全部禁用时相当于启用了这一行multi_compile的__这个没有名字的关键字.
如果一行multi_compile中使用EnableKeyword启用了多个关键字,实际也只有一个定义最靠前的关键字会被启用,其余的都不生效.
一行multi_compile如果只定义了一个关键字,比如#pragma multi_compile A,则表示该关键字始终被启用,无法使用DisableKeyword禁用该关键字
multi_compile关键字无论是否被用到,编译打包都会将所有变体都生成,打包后运行也可以通过代码启用任意的multi_compile关键字,因为这些关键字的变体还在


shader_feature
写法与multi_compile类似,不过如果一行shader_feature只定义了一个关键字,则会自动生成一个没有名字的关键字,用于实现multi_compile中__的效果
只有用到的关键字会编译出变体,编译打包后如果是已经被去掉的关键字,则无法再通过代码来启用.因为没有编译出关键字对应的shader变体
如果打包AssetBundle后shader的关键字失效,则是因为在打包时该关键字并未被使用,所以需要在打包前就通过EnableKeyword直接显式启用关键字.
或者有些shader编辑器提供了设置对应的shader参数后就会启用指定关键字的功能,比如内置的Standard的StandardShaderGUI编辑面板,就会在设置某些参数时自动启用对应的关键字

每一个shader中要用到的关键字都要在shader中使用#pragma定义了以后才能使用,否则直接#ifdef是不生效的,定义了以后关键字是默认生效的,除非使用DisableKeyword禁用了关键字

static Shader.EnableKeyword/DisableKeyword:由于是静态函数,所以会去所有的shader中寻找指定名字的关键字,然后启用或者禁用.无论该关键字是使用multi_compile还是shader_feature定义的
Material.EnableKeyword/DisableKeyword:由于是成员函数,所以只能在当前材质的shader中查找指定名字的关键字,然后启用或者禁用.无论该关键字是使用multi_compile还是shader_feature定义的